/*
Deployment script for sdt-config

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "sdt-config"
:setvar DefaultFilePrefix "sdt-config"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.RFBC\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.RFBC\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, OPERATION_MODE = READ_WRITE) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 60dd4473-63a8-4889-87cb-52a0f4b2544a is skipped, element [dbo].[JNTChangeTracking].[Id] (SqlSimpleColumn) will not be renamed to JNTChangeTrackingID';


GO
PRINT N'Creating [cfg]...';


GO
CREATE SCHEMA [cfg]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [log]...';


GO
CREATE SCHEMA [log]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [cfg].[Projects]...';


GO
CREATE TABLE [cfg].[Projects] (
    [ProjectId]   INT           IDENTITY (1, 1) NOT NULL,
    [ProjectName] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([ProjectId] ASC)
);


GO
PRINT N'Creating [cfg].[ProjectPackages]...';


GO
CREATE TABLE [cfg].[ProjectPackages] (
    [ProjectPackageID] INT      IDENTITY (1, 1) NOT NULL,
    [ProjectId]        INT      NOT NULL,
    [PackageID]        INT      NOT NULL,
    [ExecutionOrder]   INT      NULL,
    [ExecType1]        CHAR (1) NULL,
    [ExecType2]        CHAR (2) NULL,
    [ExecutionStream]  INT      NULL,
    [Disabled]         BIT      NULL,
    CONSTRAINT [PK_ProjPackages] PRIMARY KEY CLUSTERED ([ProjectPackageID] ASC)
);


GO
PRINT N'Creating [cfg].[Packages]...';


GO
CREATE TABLE [cfg].[Packages] (
    [PackageID]     INT           IDENTITY (1, 1) NOT NULL,
    [PackageFolder] VARCHAR (255) NOT NULL,
    [PackageName]   VARCHAR (255) NOT NULL,
    [PackagePath]   VARCHAR (300) NULL,
    CONSTRAINT [PK_Packages] PRIMARY KEY CLUSTERED ([PackageID] ASC)
);


GO
PRINT N'Creating [cfg].[ETLConfig]...';


GO
CREATE TABLE [cfg].[ETLConfig] (
    [PackageConfigId]     INT            IDENTITY (1, 1) NOT NULL,
    [Common_Name]         VARCHAR (50)   NULL,
    [ConfigurationFilter] NVARCHAR (500) NOT NULL,
    [ConfiguredValue]     NVARCHAR (500) NULL,
    [PackagePath]         NVARCHAR (500) NOT NULL,
    [ConfiguredValueType] NVARCHAR (20)  NOT NULL
);


GO
PRINT N'Creating [cfg].[Applications]...';


GO
CREATE TABLE [cfg].[Applications] (
    [ApplicationID]   INT           IDENTITY (1, 1) NOT NULL,
    [ApplicationName] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_Applications] PRIMARY KEY CLUSTERED ([ApplicationID] ASC),
    CONSTRAINT [U_Applications_ApplicationName] UNIQUE NONCLUSTERED ([ApplicationName] ASC)
);


GO
PRINT N'Creating [cfg].[ApplicationProjects]...';


GO
CREATE TABLE [cfg].[ApplicationProjects] (
    [ApplicationProjectID] INT IDENTITY (1, 1) NOT NULL,
    [ApplicationId]        INT NOT NULL,
    [ProjectId]            INT NOT NULL,
    [ExecutionOrder]       INT NULL,
    PRIMARY KEY CLUSTERED ([ApplicationProjectID] ASC)
);


GO
PRINT N'Creating [cfg].[JNTChangeTracking]...';


GO
CREATE TABLE [cfg].[JNTChangeTracking] (
    [JNTChangeTrackingID] INT           IDENTITY (1, 1) NOT NULL,
    [SchemaName]          VARCHAR (20)  NULL,
    [TableName]           VARCHAR (500) NULL,
    [ChangeTrackingID]    INT           NULL,
    [LastUpdated]         DATETIME      NULL,
    [PackageId]           INT           NULL,
    PRIMARY KEY CLUSTERED ([JNTChangeTrackingID] ASC)
);


GO
PRINT N'Creating [log].[SSISPkgInstance]...';


GO
CREATE TABLE [log].[SSISPkgInstance] (
    [PkgInstanceID] INT          IDENTITY (1, 1) NOT NULL,
    [AppInstanceID] INT          NOT NULL,
    [PackageID]     INT          NOT NULL,
    [StartDateTime] DATETIME     NOT NULL,
    [EndDateTime]   DATETIME     NULL,
    [Status]        VARCHAR (12) NULL,
    CONSTRAINT [PK_SSISPkgInstance] PRIMARY KEY CLUSTERED ([PkgInstanceID] ASC)
);


GO
PRINT N'Creating [log].[SSISLookupFailures]...';


GO
CREATE TABLE [log].[SSISLookupFailures] (
    [PackageName] NVARCHAR (100) NULL,
    [TaskName]    NVARCHAR (100) NULL,
    [TableName]   NVARCHAR (100) NULL,
    [KeyValue]    NVARCHAR (100) NULL,
    [DateOccured] DATETIME       NULL
);


GO
PRINT N'Creating [log].[SSISEvents]...';


GO
CREATE TABLE [log].[SSISEvents] (
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    [AppInstanceID]    INT           NOT NULL,
    [PkgInstanceID]    INT           NOT NULL,
    [EventDateTime]    DATETIME      NOT NULL,
    [EventDescription] VARCHAR (MAX) NULL,
    [SourceName]       VARCHAR (255) NULL,
    CONSTRAINT [PK_SSISEvents] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [log].[SSISErrors]...';


GO
CREATE TABLE [log].[SSISErrors] (
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    [AppInstanceID]    INT           NOT NULL,
    [PkgInstanceID]    INT           NOT NULL,
    [ErrorDateTime]    DATETIME      NOT NULL,
    [ErrorDescription] VARCHAR (MAX) NULL,
    [SourceName]       VARCHAR (255) NULL,
    CONSTRAINT [PK_SSISErrors] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [log].[SSISAppInstance]...';


GO
CREATE TABLE [log].[SSISAppInstance] (
    [AppInstanceID] INT          IDENTITY (1, 1) NOT NULL,
    [ApplicationID] INT          NOT NULL,
    [StartDateTime] DATETIME     NOT NULL,
    [EndDateTime]   DATETIME     NULL,
    [Status]        VARCHAR (12) NULL,
    CONSTRAINT [PK_SSISAppInstance] PRIMARY KEY CLUSTERED ([AppInstanceID] ASC)
);


GO
PRINT N'Creating [dbo].[SourceTables]...';


GO
CREATE TABLE [dbo].[SourceTables] (
    [TableId]         INT            IDENTITY (1, 1) NOT NULL,
    [DatabaseName]    NVARCHAR (100) NOT NULL,
    [SchemaName]      NVARCHAR (20)  NOT NULL,
    [TableName]       NVARCHAR (100) NOT NULL,
    [LoadTolerancePC] SMALLINT       NOT NULL,
    [AutoCreate]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([TableId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [cfg].[JNTChangeTracking]...';


GO
ALTER TABLE [cfg].[JNTChangeTracking]
    ADD DEFAULT getdate() FOR [LastUpdated];


GO
PRINT N'Creating [dbo].[DF_LoadTolerancePC]...';


GO
ALTER TABLE [dbo].[SourceTables]
    ADD CONSTRAINT [DF_LoadTolerancePC] DEFAULT 0 FOR [LoadTolerancePC];


GO
PRINT N'Creating unnamed constraint on [dbo].[SourceTables]...';


GO
ALTER TABLE [dbo].[SourceTables]
    ADD DEFAULT ((1)) FOR [AutoCreate];


GO
PRINT N'Creating [cfg].[FK_ProjectPackages_Packages]...';


GO
ALTER TABLE [cfg].[ProjectPackages] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectPackages_Packages] FOREIGN KEY ([PackageID]) REFERENCES [cfg].[Packages] ([PackageID]);


GO
PRINT N'Creating [cfg].[FK_ProjectPackages_Projects]...';


GO
ALTER TABLE [cfg].[ProjectPackages] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectPackages_Projects] FOREIGN KEY ([ProjectId]) REFERENCES [cfg].[Projects] ([ProjectId]);


GO
PRINT N'Creating [cfg].[FK_ApplicationProjects_Applications]...';


GO
ALTER TABLE [cfg].[ApplicationProjects] WITH NOCHECK
    ADD CONSTRAINT [FK_ApplicationProjects_Applications] FOREIGN KEY ([ApplicationId]) REFERENCES [cfg].[Applications] ([ApplicationID]);


GO
PRINT N'Creating [cfg].[FK_ApplicationProjects_Projects]...';


GO
ALTER TABLE [cfg].[ApplicationProjects] WITH NOCHECK
    ADD CONSTRAINT [FK_ApplicationProjects_Projects] FOREIGN KEY ([ProjectId]) REFERENCES [cfg].[Projects] ([ProjectId]);


GO
PRINT N'Creating [cfg].[FK_JNTChangeTracking_Package]...';


GO
ALTER TABLE [cfg].[JNTChangeTracking] WITH NOCHECK
    ADD CONSTRAINT [FK_JNTChangeTracking_Package] FOREIGN KEY ([PackageId]) REFERENCES [cfg].[Packages] ([PackageID]);


GO
PRINT N'Creating [log].[FK_logSSISAppInstance_cfgApplication_ApplicationID]...';


GO
ALTER TABLE [log].[SSISAppInstance] WITH NOCHECK
    ADD CONSTRAINT [FK_logSSISAppInstance_cfgApplication_ApplicationID] FOREIGN KEY ([ApplicationID]) REFERENCES [cfg].[Applications] ([ApplicationID]);


GO
PRINT N'Creating [cfg].[GetSSISPackagesByStream]...';


GO
CREATE PROCEDURE [cfg].[GetSSISPackagesByStream]
@ApplicationName VARCHAR (255), @ExecutionType INT, @ExecutionBatch INT, @ExecutionStream INT
AS
Select p.PackageFolder + p.PackageName As PackagePath
    , p.PackageName
    , p.PackageFolder
    , convert(varchar(1), case when @ExecutionType = 1 then ExecType1 else ExecType2 end) as ExecutionType
From cfg.ProjectPackages ap
Inner Join cfg.Packages p on p.PackageID = ap.PackageID
Inner Join cfg.ApplicationProjects a on a.ProjectID = ap.ProjectID
Inner Join cfg.Applications app on app.ApplicationId = a.ApplicationID
Where ApplicationName = @ApplicationName
	And ap.ExecutionOrder = @ExecutionBatch
	And ap.ExecutionStream = @ExecutionStream
	And IsNull(ap.[Disabled],'False') <> 'True'

-- [cfg].[GetSSISPackagesByStream] 'J2DW', 2, 100, 1
GO
PRINT N'Creating [cfg].[GetSSISNoOfStreamsForBatch]...';


GO
CREATE PROCEDURE [cfg].[GetSSISNoOfStreamsForBatch] @ApplicationName VARCHAR (255), @ExecutionBatch INT
AS
Select 
	MAX(ISNULL(ExecutionStream, 1))		AS NoOfStreamsForBatch
From cfg.ProjectPackages ap
Inner Join cfg.Packages p on p.PackageID = ap.PackageID
Inner Join cfg.ApplicationProjects a on a.ProjectID = ap.ProjectID
Inner Join cfg.Applications app on app.ApplicationId = a.ApplicationID
Where ApplicationName = @ApplicationName
  And ap.ExecutionOrder = @ExecutionBatch
  And IsNull(ap.[Disabled],'False') <> 'True'
GO
PRINT N'Creating [cfg].[GetSSISApplicationBatches]...';


GO
CREATE PROCEDURE [cfg].[GetSSISApplicationBatches] @ApplicationName VARCHAR (255)
AS
Select 
	distinct ap.ExecutionOrder		As ExecutionBatch
From cfg.ProjectPackages ap
Inner Join cfg.Packages p on p.PackageID = ap.PackageID
Inner Join cfg.ApplicationProjects a on a.ProjectID = ap.ProjectID
Inner Join cfg.Applications app on app.ApplicationId = a.ApplicationID
Where ApplicationName = @ApplicationName
  And IsNull(ap.[Disabled],'False') <> 'True'
Order By ap.ExecutionOrder
GO
PRINT N'Creating [cfg].[GetSSISApplication]...';


GO
CREATE PROCEDURE [cfg].[GetSSISApplication]
@ApplicationName VARCHAR (255), @ExecutionType INT
AS
Select p.PackageFolder + p.PackageName As PackagePath
    , ap.ExecutionOrder
    , p.PackageName
    , p.PackageFolder
    , convert(varchar(1), case when @ExecutionType = 1 then ExecType1 else ExecType2 end) as ExecutionType
From cfg.ProjectPackages ap
Inner Join cfg.Packages p on p.PackageID = ap.PackageID
Inner Join cfg.ApplicationProjects a on a.ProjectID = ap.ProjectID
Inner Join cfg.Applications app on app.ApplicationId = a.ApplicationID
Where ApplicationName = @ApplicationName
  And IsNull(ap.[Disabled],'False') <> 'True'
Order By a.ExecutionOrder, ap.ExecutionOrder
GO
PRINT N'Creating [cfg].[DeleteSSISPackage]...';


GO
CREATE PROCEDURE [cfg].[DeleteSSISPackage] @PackageName varchar(50)
AS

SET XACT_ABORT ON
GO
PRINT N'Creating [cfg].[AddSSISProjectPackage]...';


GO
CREATE Procedure [cfg].[AddSSISProjectPackage]
  @ProjectID int
 ,@PackageID int
 ,@ExecutionOrder int = 10
 ,@ExecutionType1 char(1) = 'I'
 ,@ExecutionType2 char(1) = 'I'
 ,@ExecutionStream int=1
As

  Set NoCount On

  If Not Exists(Select ProjectId
                From cfg.ProjectPackages
                Where ProjectId = @ProjectID
                  And PackageId = @PackageID)
   begin
    Insert Into cfg.ProjectPackages
    (PRojectId
    ,PackageID
    ,ExecutionOrder
    ,ExecType1
    ,ExecType2
    ,ExecutionStream
    ,[Disabled]
    )
    Values (@ProjectID, @PackageID, @ExecutionOrder, @ExecutionType1,@ExecutionType2,@ExecutionStream, 'False')
   end
GO
PRINT N'Creating [cfg].[AddSSISProject]...';


GO
CREATE PROCEDURE [cfg].[AddSSISProject]
@ProjectName VARCHAR (255), @ProjectID INT OUTPUT
AS
Set NoCount On

  declare @tbl table (ProjectID int)
  
  If Not Exists(Select ProjectName
                From cfg.Projects
                Where ProjectName = @ProjectName)
   begin
    Insert Into cfg.Projects
    (ProjectName)
    Output inserted.ProjectID into @tbl
    Values (@ProjectName)
   end
  Else
   insert into @tbl
   (ProjectID)
   (Select ProjectID
    From cfg.Projects
    Where ProjectName = @ProjectName)

  Select @ProjectID = ProjectID from @tbl
GO
PRINT N'Creating [cfg].[AddSSISPackage]...';


GO
CREATE PROCEDURE [cfg].[AddSSISPackage]
@PackageName VARCHAR (255), @PackageFolder VARCHAR (255)
AS
declare @PkgID int 

  Set NoCount On

  declare @tbl table (PkgID int)

  If Not Exists(Select PackageFolder + PackageName
                From cfg.Packages
                Where PackageFolder = @PackageFolder
                  And PackageName = @PackageName)
   begin
    Insert Into cfg.Packages
    (PackageName
    ,PackageFolder)
    Output inserted.PackageID Into @tbl
    Values (@PackageName, @PackageFolder)
   end
  Else
   insert into @tbl
   (PkgID)
   (Select PackageID
    From cfg.Packages
    Where PackageFolder = @PackageFolder
      And PackageName = @PackageName)
   
   Select @PkgID = PkgID From @tbl
   
   Return @PkgId
GO
PRINT N'Creating [cfg].[AddSSISApplicationProject]...';


GO
CREATE PROCEDURE [cfg].[AddSSISApplicationProject]
@ApplicationID INT, @ProjectID INT, @ExecutionOrder INT=10
AS
Set NoCount On

If Not Exists(Select ApplicationID,ProjectId
                From cfg.ApplicationProjects
                Where ApplicationId = @ApplicationId
				  AND ProjectId = @ProjectID)
    Insert Into cfg.ApplicationProjects
    (ApplicationID
    ,ProjectId
    ,ExecutionOrder
	)
    Values (@ApplicationID, @ProjectID, @ExecutionOrder)
GO
PRINT N'Creating [cfg].[AddSSISApplication]...';


GO
CREATE PROCEDURE [cfg].[AddSSISApplication]
@ApplicationName VARCHAR (255), @AppID INT OUTPUT
AS
Set NoCount On

  declare @tbl table (AppID int)
  
  If Not Exists(Select ApplicationName
                From cfg.Applications
                Where ApplicationName = @ApplicationName)
   begin
    Insert Into cfg.Applications
    (ApplicationName)
    Output inserted.ApplicationID into @tbl
    Values (@ApplicationName)
   end
  Else
   insert into @tbl
   (AppID)
   (Select ApplicationID
    From cfg.Applications
    Where ApplicationName = @ApplicationName)

  Select @AppID = AppID from @tbl
GO
PRINT N'Creating [cfg].[GetSSISChangeTrackingID]...';


GO
CREATE PROCEDURE [cfg].[GetSSISChangeTrackingID]
(
	@PackageName VARCHAR(200)
)
AS
	SELECT	JNTChangeTrackingID 
	FROM	cfg.JNTChangeTracking	c 
	JOIN	cfg.Packages			p ON c.PackageId = p.PackageID  
	WHERE	PackageName				= @PackageName
RETURN 0
GO
PRINT N'Creating [log].[LogPackageFailure]...';


GO
CREATE PROCEDURE [log].[LogPackageFailure]
@PkgInstanceID INT
AS
update log.SSISPkgInstance
 set EndDateTime = GetDate()
   , Status = 'Failed'
 where PkgInstanceID = @PkgInstanceID
GO
PRINT N'Creating [log].[LogEvent]...';


GO
CREATE PROCEDURE [log].[LogEvent]
@AppInstanceID INT, @PkgInstanceID INT, @SourceName VARCHAR (255), @EventDescription VARCHAR (MAX)
AS
insert into [log].SSISEvents
 (AppInstanceID, PkgInstanceID, SourceName, EventDescription, EventDateTime)
 Values
 (@AppInstanceID 
,@PkgInstanceID 
,@SourceName 
,@EventDescription
,GetDate())
GO
PRINT N'Creating [log].[LogError]...';


GO
CREATE PROCEDURE [log].[LogError]
@AppInstanceID INT, @PkgInstanceID INT, @SourceName VARCHAR (255), @ErrorDescription VARCHAR (MAX)
AS
insert into log.SSISErrors
 (AppInstanceID, PkgInstanceID, SourceName, ErrorDescription,ErrorDatetime)
 Values
 (@AppInstanceID 
,@PkgInstanceID 
,@SourceName 
,@ErrorDescription,Getdate())
GO
PRINT N'Creating [log].[LogApplicationSuccess]...';


GO
CREATE PROCEDURE [log].[LogApplicationSuccess]
@AppInstanceID INT
AS
update log.SSISAppInstance
 set EndDateTime = GetDate()
   , Status = 'Success'
 where AppInstanceID = @AppInstanceID
GO
PRINT N'Creating [log].[LogApplicationFailure]...';


GO
CREATE PROCEDURE [log].[LogApplicationFailure]
@AppInstanceID INT
AS
update log.SSISAppInstance
 set EndDateTime = GetDate()
   , Status = 'Failed'
 where AppInstanceID = @AppInstanceID
GO
PRINT N'Creating [log].[GetExecutionErrors]...';


GO
Create proc [log].[GetExecutionErrors] @AppInstanceId INT 

as
select  pk.PackageName,
		ev.* 

from	log.ssiserrors ev

join	log.SSISPkgInstance pi on ev.PkgInstanceID = pi.PkgInstanceID

join cfg.packages pk on pk.PackageID = pi.PackageID
where ev.AppInstanceID = @AppInstanceId
GO
PRINT N'Creating [log].[LogStartOfPackage]...';


GO
CREATE PROCEDURE [log].[LogStartOfPackage]
@AppInstanceID INT, @PackagePath VARCHAR (255)
AS
declare @ErrMsg varchar(255)
declare @PkgID int = (Select max(PackageID)
                      From cfg.Packages
                      Where PackageFolder + PackageName = @PackagePath
					  )

If (@PkgID Is Null)
 begin
  set @ErrMsg = 'Cannot find PackagePath ' + Coalesce(@PackagePath, '')
  raiserror(@ErrMsg,16,1)
 end

Insert Into log.SSISPkgInstance
 (AppInstanceID, PackageID, StartDateTime, Status)
 Output inserted.PkgInstanceID
 Values
 (@AppInstanceID, @PkgID, GetDate(), 'Running')
GO
PRINT N'Creating [log].[LogStartOfApplication]...';


GO
CREATE PROCEDURE [log].[LogStartOfApplication]
@ApplicationName VARCHAR (255)
AS
declare @ErrMsg varchar(255)
declare @AppID int = (Select ApplicationID
                      From cfg.Applications
                      Where ApplicationName = @ApplicationName)

If (@AppID Is Null)
 begin
  set @ErrMsg = 'Cannot find ApplicationName ' + Coalesce(@ApplicationName, '<NULL>')
  raiserror(@ErrMsg,16,1)
  return-1
 end

Insert Into [log].SSISAppInstance
 (ApplicationID, StartDateTime, Status)
 Output inserted.AppInstanceID
 Values
 (@AppID, GetDate(), 'Running')
GO
PRINT N'Creating [log].[LogPackageSuccess]...';


GO
CREATE PROCEDURE [log].[LogPackageSuccess]
@PkgInstanceID INT
AS
update log.SSISPkgInstance
 set EndDateTime = GetDate()
   , Status = 'Success'
 where PkgInstanceID = @PkgInstanceID
GO
PRINT N'Creating [dbo].[PurgeSSISFrameworkLogs]...';


GO
CREATE PROCEDURE [dbo].[PurgeSSISFrameworkLogs]
(
	   @DaysToKeep INT = 30
	 , @BlockSize INT= 500000
)
AS
BEGIN 

	SET XACT_ABORT ON 
	SET NOCOUNT ON 

	DECLARE @RowsAffected INT = 1
	DECLARE @CutOff DATETIME

	SELECT @CutOff = DATEADD(DD,-@DaysToKeep,GETDATE())




	WHILE @RowsAffected > 0 
	BEGIN 

		BEGIN TRAN 
			SELECT @RowsAffected = 0

			DELETE TOP(@BlockSize) FROM [log].[SSISEvents]
			WHERE [EventDateTime] < @CutOff
			SELECT @RowsAffected = @RowsAffected + @@ROWCOUNT

			DELETE TOP(@BlockSize) FROM  [log].[SSISErrors]
			WHERE [ErrorDateTime] < @CutOff
			SELECT @RowsAffected = @RowsAffected + @@ROWCOUNT

			DELETE TOP(@BlockSize) FROM [log].[SSISLookupFailures]
			WHERE [DateOccured]  < @CutOff
			SELECT @RowsAffected = @RowsAffected + @@ROWCOUNT

			DELETE TOP(@BlockSize) FROM  [log].[SSISPkgInstance]
			WHERE EndDateTime < @CutOff
			SELECT @RowsAffected = @RowsAffected + @@ROWCOUNT

			DELETE TOP(@BlockSize) FROM  [log].[SSISAppInstance]
			WHERE EndDateTime < @CutOff
			SELECT @RowsAffected = @RowsAffected + @@ROWCOUNT

		COMMIT TRAN

	END

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '60dd4473-63a8-4889-87cb-52a0f4b2544a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('60dd4473-63a8-4889-87cb-52a0f4b2544a')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

declare @AppId INT = 0;
declare @AppId_Dim INT = 1;
declare @AppId_Fact INT = 2;
declare @AppId_Cube INT = 3;
declare @AppId_GDS INT = 4;
declare @AppId_Weblogs INT = 5;

declare @ProjectId INT = 0;
declare @ProjectId_Dim INT = 1;
declare @ProjectId_Fact INT = 2;
declare @ProjectId_Cube INT = 3;
declare @ProjectId_GDS INT = 4;
declare @ProjectId_Weblogs INT = 5;

declare @PackageId INT = 0;
declare @ExecutionOrder INT = 0;
declare @AppName VARCHAR(256) = 'SDT Load';
declare @AppName_Dim VARCHAR(256) = 'SDT Dim';
declare @AppName_Fact VARCHAR(256) = 'SDT Fact';
declare @AppName_Cube VARCHAR(256) = 'SDT Cube';
declare @AppName_GDS VARCHAR(256) = 'SDT GDS';
declare @AppName_Weblogs VARCHAR(256) = 'SDT Weblogs';

declare @ProjectName VARCHAR(256) = 'SDT Load';
declare @ProjectName_Dim VARCHAR(256) = 'SDT Dimensions';
declare @ProjectName_Fact VARCHAR(256) = 'SDT Facts';
declare @ProjectName_Cube VARCHAR(256) = 'SDT Cube';
declare @ProjectName_GDS VARCHAR(256) = 'SDT GDS';
declare @ProjectName_Weblogs VARCHAR(256) = 'SDT Weblogs';



exec [cfg].[AddSSISApplication] @AppName, @AppId OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Dim, @AppId_Dim OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Fact, @AppId_Fact OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Cube, @AppId_Cube OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_GDS, @AppId_GDS OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Weblogs, @AppId_Weblogs OUTPUT;


exec [cfg].[AddSSISProject] @ProjectName, @ProjectId OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Dim, @ProjectId_Dim OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Fact, @ProjectId_Fact OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Cube, @ProjectId_Cube OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_GDS, @ProjectId_GDS OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Weblogs, @ProjectId_Weblogs OUTPUT;


exec [cfg].[AddSSISApplicationProject] @AppId, @ProjectId, 10;
exec [cfg].[AddSSISApplicationProject] @AppId_Dim, @ProjectId_Dim, 20;
exec [cfg].[AddSSISApplicationProject] @AppId_Fact, @ProjectId_Fact, 30;
exec [cfg].[AddSSISApplicationProject] @AppId_Cube, @ProjectId_Cube, 40;
exec [cfg].[AddSSISApplicationProject] @AppId_GDS, @ProjectId_GDS, 50;
exec [cfg].[AddSSISApplicationProject] @AppId_Weblogs, @ProjectId_Weblogs, 50;



-- Dimensions
exec @PackageId = [cfg].AddSSISPackage 'dimCoverage.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimField.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimWeekDate.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimTransactionType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimMarketingChannel.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimPaymentType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimApplicationEventType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

--FactDims (Treated as Dmmensions)
exec @PackageId = [cfg].AddSSISPackage 'dimWebVisitor.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimWebSession.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimApplication.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimGDS.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimShare.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimCustomer.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimAgreement.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;


-- Facts
exec @PackageId = [cfg].AddSSISPackage 'factApplicationEvent.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Fact, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'factTransaction.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Fact, @PackageId, @ExecutionOrder, 'I', 'F', 1;

--update pp 
--set Disabled = 1
----select *
--from cfg.Applications a
--join cfg.ApplicationProjects ap
--on a.ApplicationID = ap.ApplicationId
--join cfg.ProjectPackages pp
--on ap.ProjectId = pp.ProjectId
--join cfg.Projects pr
--on pp.ProjectId = pr.ProjectId
--join cfg.Packages pa
--on pp.PackageID = pa.PackageID
--where pa.PackageName = 'factTransaction.dtsx'

-- GDS
exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_application.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_admquery.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_applicant.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_decisionengine.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_share.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

-- Weblogs
exec @PackageId = [cfg].AddSSISPackage 'weblogs_sdt_logimport.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Weblogs, @PackageId, @ExecutionOrder, 'I', 'F', 1;

-- Cube

exec @PackageId = [cfg].AddSSISPackage 'ProcessSDTApplicationCube.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Cube, @PackageId, @ExecutionOrder, 'I', 'F', 1;

GO
declare @AppId INT = 0;
declare @ProjectId INT = 0;
declare @PackageId INT = 0;
declare @ExecutionOrder INT = 0;
declare @AppName VARCHAR(256) = 'SDT Hubload';
declare @ProjectName VARCHAR(256) = 'SDT Hubload';

exec [cfg].[AddSSISApplication] @AppName, @AppId OUTPUT;

exec [cfg].[AddSSISProject] @ProjectName, @ProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @AppId, @ProjectId, 10;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementDefinitionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementDefinitionTable_acls.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementDefinitionTableExtra.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementPaymentMethodTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementStatusTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AreaTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load BranchTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load BranchType.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CollectorTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CustomerDetailsTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CustomerPrevAddress.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load tblCustomerPaymentPerformance.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CustomerTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load DivisionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_AL_BranchPayslips.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_CreditCardPaymentTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_CustomerAddressTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_PayrollCollectorLinkHistoryTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_PayrollTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load JourneyStatusTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load PostCodeRegions.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load Postcodes.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load PostCodeSectors.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RebateToPayPerPoundTable_acls.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RegionAreaTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RegionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RPT_CashSheets.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load SectionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load TransactionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load TransactionTypeTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load TransferHistoryTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load UserTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load WriteOffTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load MARS_RegistrationTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load MARS_WithdrawalReceiptTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load tblCustomerRisk.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_PayrollCollectorLinkTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

--[cfg].[GetSSISApplication] 'SDT Hubload', 1
GO
declare @MergeAppId INT = 0;
declare @MergeProjectId INT = 0;
declare @MergePackageId INT = 0;
declare @MergeExecutionOrder INT = 0;
declare @MergeAppName VARCHAR(256) = 'SDT HubMerge';
declare @MergeProjectName VARCHAR(256) = 'SDT HubMerge';

exec [cfg].[AddSSISApplication] @MergeAppName, @MergeAppId OUTPUT;
exec [cfg].[AddSSISProject] @MergeProjectName, @MergeProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @MergeAppId, @MergeProjectId, 10;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblBranch.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;

exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblUser.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblSection.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblProduct.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblCustomer.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblCustomerAddress.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


--exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreementStatus.dtsx', '' ;-- Folder name not needed for SSIS Catalog
--SET @MergeExecutionOrder += 10;
--exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreement.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourney.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourneySection.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourneyAgent.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourneyCustomer.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;

exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblVisit.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;  -- Visit will always work on a full load


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblVisitResult.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransaction.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransactionAllocation.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblRebateToPayPerPound.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


--exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransactionType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
--SET @MergeExecutionOrder += 10;
--exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_mobile_tblCustomerRisk.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_mobile_tblDashboardAmount.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


/* Temp Disable non-Online Journey transformations - Transaction/TransactionAllocation */
--update pp 
--set Disabled = 1
----select *
--from cfg.Applications a
--join cfg.ApplicationProjects ap
--on a.ApplicationID = ap.ApplicationId
--join cfg.ProjectPackages pp
--on ap.ProjectId = pp.ProjectId
--join cfg.Projects pr
--on pp.ProjectId = pr.ProjectId
--join cfg.Packages pa
--on pp.PackageID = pa.PackageID
--where pa.PackageName in ('Merge_dbo_tblTransaction.dtsx','Merge_dbo_tblTransactionAllocation.dtsx')
declare @stgAppId INT = 0;
declare @stgProjectId INT = 0;
declare @stgPackageId INT = 0;
declare @stgExecutionOrder INT = 0;
declare @stgAppName VARCHAR(256) = 'SDT stgToJNT';
declare @stgProjectName VARCHAR(256) = 'SDT stgToJNT';

exec [cfg].[AddSSISApplication] @stgAppName, @stgAppId OUTPUT;
exec [cfg].[AddSSISProject] @stgProjectName, @stgProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @stgAppId, @stgProjectId, 10;

SET @stgExecutionOrder += 10;
exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_CustomerTable.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_CustomerAddress.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_mobile_MARS_WithdrawalReceipt.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_IDM_AL_BranchPayslips.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_TransactionTable.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;


--[cfg].[GetSSISApplication] 'SDT stgToJNT', 1



Declare @ProjectId INT, @PackageId INT

Select  @PackageId = pp.PackageId,
	   @ProjectId = p.ProjectId
	    
From   cfg.Projects p
Join   cfg.ProjectPackages pp on p.ProjectId = pp.ProjectId
Join   cfg.Packages pk on pk.PackageID = pp.PackageID
Where  p.ProjectName = 'SDT stgToJNT'
And           pk.PackageName = 'Merge_dbo_TransactionTable.dtsx'
 
Update cfg.ProjectPackages
set           Disabled = 1
Where  ProjectId = @ProjectId
and           PackageID = @PackageId

GO
declare @stgAppId INT = 0;
declare @stgProjectId INT = 0;
declare @stgPackageId INT = 0;
declare @stgExecutionOrder INT = 0;
declare @stgAppName VARCHAR(256) = 'SDT stgToJNT_Daily';
declare @stgProjectName VARCHAR(256) = 'SDT stgToJNT_Daily';

exec [cfg].[AddSSISApplication] @stgAppName, @stgAppId OUTPUT;
exec [cfg].[AddSSISProject] @stgProjectName, @stgProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @stgAppId, @stgProjectId, 10;

SET @stgExecutionOrder += 10;
exec @stgPackageId = [cfg].AddSSISPackage 'Update_CustomerTable_JourneyOrderBy.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

SET @stgExecutionOrder += 10;
exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransfersPending_DayMoves.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

--[cfg].[GetSSISApplication] 'SDT stgToJNT_Daily', 1

GO
/* Create config records for package configuration */ 

DECLARE @SourceServer varchar(255);
DECLARE @HostServer varchar(255);
DECLARE @AzureAccountName varchar(255);
DECLARE @AzureAccountKey varchar(255);
DECLARE @Uid varchar(255);
DECLARE @pwd varchar(255);
DECLARE @MySQLUser varchar(100);
DECLARE @MySQLServer varchar(100);
DECLARE @EnvUser varchar(100);
DECLARE @EnvPassword varchar(100);


Select @HostServer = CASE 
WHEN @@SERVERNAME IN ('prod-sdt','sdt-preprod','uat-sdt','sdt-test','sdt-integration','testsdtdb')
THEN @@SERVERNAME+'.database.windows.net'
WHEN @@SERVERNAME = 'UAT-SDT-VM-DATA' THEN 'UAT-SDT-VM-DATA'
WHEN @@SERVERNAME = 'PREPROD-SDT-VM-DATA' THEN 'PREPROD-SDT-VM-DATA'
WHEN @@SERVERNAME = 'PROD-SDT-VM-DATA' THEN 'PROD-SDT-VM-DATA'
ELSE 'localhost'
END;

SELECT @SourceServer = CASE
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'testsdtdb.database.windows.net' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'uat-sdt.database.windows.net' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'sdt-test.database.windows.net' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'sdt-integration.database.windows.net' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'sdt-preprod.database.windows.net' -- These need setting
WHEN @HostServer = 'prd-sdt-integration.database.windows.net' THEN 'prd-sdt.database.windows.net' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'uat-sdt.database.windows.net' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'sdt-preprod.database.windows.net' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'prd-sdt.database.windows.net' -- These need setting
ELSE 'localhost'
END;

/* Azure Subscription Details */
SELECT @AzureAccountName = CASE
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'testsdtlogs' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'uatsdtlogs' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'testsdtlogs' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'sdtlogs' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'preprodsdtlogs' -- These need setting
WHEN @HostServer = 'prod-sdt-integration.database.windows.net' THEN 'prdsdtlogs' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'uatsdtlogs' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'preprodsdtlogs' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'prodsdtlogs' -- These need setting
ELSE 'uatsdtlogs'
END;

SELECT @AzureAccountKey = CASE
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'PJwWbVZnZQoNd9yBS8GyR5PeDslVO5PF67qzyhf0+54uL3E+weYCu1UjzmofcZ5JXsPRTIwGJxH9yeKmEqUDow==' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'prod-sdt.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
ELSE 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ=='
END
;



/* Need to clarify connection details */
SELECT @MySQLUser = CASE 
WHEN @HostServer IN ('PREPROD-SDT-VM-DATA','PROD-SDT-VM-DATA','UAT-SDT-VM-DATA','localhost','uat-sdt.database.windows.net','sdt-preprod.database.windows.net','prod-sdt.database.windows.net','testsdtdb.database.windows.net')
	THEN 'sdtaylor'
ELSE 'sdtaylor'
END;
 
SELECT @MySQLServer = CASE 
WHEN  @HostServer IN ('PREPROD-SDT-VM-DATA','PROD-SDT-VM-DATA','UAT-SDT-VM-DATA','localhost','uat-sdt.database.windows.net','sdt-preprod.database.windows.net','prod-sdt.database.windows.net','testsdtdb.database.windows.net')
	THEN 'ec2-52-50-237-245.eu-west-1.compute.amazonaws.com'
ELSE 'ec2-52-50-237-245.eu-west-1.compute.amazonaws.com'
END;

/* Set User Name & Password for Environments */

SELECT @EnvUser = CASE 
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'sdtadmin@testsdtdb' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'sdtadmin@uat-sdt' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'sdtadmin@sdt-test' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'sdtadmin@sdt-integration' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'OnlineUserLogin@sdt-preprod' -- These need setting
WHEN @HostServer = 'prod-sdt-integration.database.windows.net' THEN 'sdtadmin@prod-sdt' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'sdtadmin@uat-sdt' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'OnlineUserLogin@sdt-preprod' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'sdtadmin@uat-sdt' -- These need setting
ELSE 'sdtadmin@uat-sdt'
END;

SELECT @EnvPassword = CASE 
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'Peroni4me' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'Prapr2Vu3het' -- These need setting
WHEN @HostServer = 'prod-sdt-integration.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'Prapr2Vu3het' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'P445w0rd' -- These need setting
ELSE 'P445w0rd'
END;

-- Data Source=uat-sdt.database.windows.net;User ID=sdtadmin@uat-sdt;Password=P455w0rd;Initial Catalog=sdtStaging_tds;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;


;with config as (
SELECT *
FROM (
VALUES
(1,'CONFIG','ConfigDbConnectionstring','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdt-config;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdt-config].Properties[ConnectionString]','String'),
(2,'JNT','JNTDatabaseDbConnectionstring','Provider=SQLNCLI;Server=SDTDBV002;Database=JNTDatabase;Trusted_Connection=yes;','\Package.Connections[JNTDatabase].Properties[ConnectionString]','String'),
(3,'GDS','MySQLDbConnectionstring','server='+@MySQLServer+';user id='+@MySQLUser+';password=Datashed123;database=sdtaylor;','\Package.Connections[MySQLDb].Properties[ConnectionString]','String'),
(4,'MART','sdt-applicationdatamartDbConnectionstring','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdt-applicationdatamart;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdt-applicationdatamart].Properties[ConnectionString]','String'),
(5,'VAULT','sdt-datavaultDbConnectionstring','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdt-datavault;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdt-datavault].Properties[ConnectionString]','String'),
(6,'ADOVAULT','sdt-datavaultDbADONETConnectionstring','Server='+@SourceServer+';Database=sdt-datavault;User Id='+@EnvUser+';Password='+@EnvPassword+';','\Package.Connections[sdt-datavaultADONET].Properties[ConnectionString]','String'),
(7,'SDTLOGS','sdtlogsAzureConnectionString','DefaultEndpointsProtocol=https;AccountName='+@AzureAccountName+';AccountKey='+@AzureAccountKey+';','\Package.Connections[sdtlogs].Properties[ConnectionString]','String'),
(9,'HUB','sdtStagingDbConnectionString','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdtStaging_tds;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdtStaging].Properties[ConnectionString]','String'),
(10,'CUBE','sdt-applicationcubeDbConnectionString','Data Source='+@SourceServer+';Initial Catalog=sdt-applicationcube;Provider=MSOLAP.7;Impersonation Level=Impersonate;','\Package.Connections[sdt-applicationcube].Properties[ConnectionString]','String')
) AS vtable
 
([PackageConfigId],[Common_Name],[ConfigurationFilter],[ConfiguredValue],[PackagePath],[ConfiguredValueType])
)
 
MERGE cfg.ETLCONFIG as Target
using config as Source
on Source.ConfigurationFilter = Target.ConfigurationFilter
WHEN MATCHED AND
	(ISNULL(Source.[Common_Name],'') <> ISNULL(Target.[Common_Name],'')
	OR ISNULL(Source.[ConfiguredValue],'') <> ISNULL(Target.[ConfiguredValue],'')
	OR ISNULL(Source.[PackagePath],'') <> ISNULL(Target.[PackagePath],'')
	OR ISNULL(Source.[ConfiguredValueType],'') <> ISNULL(Target.[ConfiguredValueType],'')
	OR ISNULL(Source.[Common_Name],'') <> ISNULL(Target.[Common_Name],'')
	)
THEN UPDATE SET
		[Common_Name] = Source.[Common_Name]
		,[ConfiguredValue] = Source.[ConfiguredValue]
		,[PackagePath] = Source.[PackagePath]
		,[ConfiguredValueType] = Source.[ConfiguredValueType]
WHEN NOT MATCHED THEN INSERT ([ConfigurationFilter],[ConfiguredValue],[PackagePath],[ConfiguredValueType])
Values (Source.[ConfigurationFilter],Source.[ConfiguredValue],Source.[PackagePath],Source.[ConfiguredValueType])
WHEN NOT MATCHED BY SOURCE 
THEN DELETE;

--update [cfg].[ETLConfig]
--	set [ConfiguredValue] = CASE WHEN @@ServerName = 'UAT-SDT-VM-DATA' THEN REPLACE([ConfiguredValue],'uat-sdt.database.windows.net','UAT-SDT-VM-DATA')
--									ELSE [ConfiguredValue] END
--	where PackageConfigId in (1,9);
WITH sourcetables
AS (
--StagingDb related tables (being added to StagingDb and will provide the link to JNT data)
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplication' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplicationCustomer' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplicationEvents' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplicationExclusions' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblEventType' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblExclusionType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblAgreement' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblAgreementStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblArea' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblBadDebtStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblBranch' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCompany' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomer' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomerAddress' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomerAddressType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomerStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblDefaultedStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblFinanciallySanctionedList' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourney' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneyAgent' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneyAgentDelegated' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneyCustomer' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneySection' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPaymentFrequency' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPaymentType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPostcodeCoverage' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblProduct' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblRegion' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblSection' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblTransaction' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblTransactionType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblUser' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblWeekEnding' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblAAIndicator' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPPMessage' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblTransactionAllocation' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblChannelType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblRebateToPayPerPound' as TableName 
-- GDS related tables (will be source for Bureau variable details & summary)
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'ADMQuery' as TableName UNION
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'Application' as TableName UNION
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'DecisionEngine' as TableName UNION
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'Share' as TableName



	)
MERGE dbo.SourceTables AS target
USING sourcetables AS Source
	ON Target.Databasename = source.databasename
		AND target.schemaname = source.schemaname
		AND target.tablename = source.tablename
WHEN NOT MATCHED
	THEN
		INSERT (
			tablename
			,databasename
			,schemaname
			)
		VALUES (
			source.tablename
			,source.databasename
			,source.schemaname
			)
WHEN NOT MATCHED BY SOURCE
	THEN DELETE;
-- Insert JNT Change Tracking tables

SET IDENTITY_INSERT cfg.JNTChangeTracking ON;

;WITH CTE AS	(
				SELECT *
				FROM	(
							SELECT 1, 'dbo', 'tblCustomer', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_CustomerTable.dtsx'
						UNION
							SELECT 2, 'dbo', 'tblCustomerAddress', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_CustomerAddress.dtsx'
						UNION
							SELECT 3, 'mobile', 'tblDashboardAmount (Mars)', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_mobile_MARS_WithdrawalReceipt.dtsx'
						UNION
							SELECT 4, 'mobile', 'tblDashboardAmount (Payslips)', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_IDM_AL_BranchPayslips.dtsx'
						UNION
							SELECT 5, 'dbo', 'tblTransaction', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_TransactionTable.dtsx'
						UNION
							SELECT 6, 'dbo', 'tblJourneyCustomer_JourneyOrderBy', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Update_CustomerTable_JourneyOrderBy.dtsx'
						UNION
							SELECT 7, 'dbo', 'tblJourneyCustomer', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_tblTransfersPending_DayMoves.dtsx'
						) AS ctTable
					(JNTChangeTrackingID, SchemaName, TableName, ChangeTrackingID, LastUpdated, PackageId)
				)
MERGE	cfg.JNTChangeTracking	dest
USING	CTE						source ON dest.JNTChangeTrackingID = source.JNTChangeTrackingID
WHEN MATCHED
THEN 
UPDATE	
SET		SchemaName			= source.SchemaName
,		TableName			= source.TableName
,		ChangeTrackingID	= source.ChangeTrackingID
,		LastUpdated			= source.LastUpdated
,		PackageId			= source.PackageId
WHEN NOT MATCHED
THEN
INSERT
		(	JNTChangeTrackingID
		,	SchemaName
		,	TableName
		,	ChangeTrackingID
		,	LastUpdated
		,	PackageId
		)
VALUES	(	source.JNTChangeTrackingID
		,	source.SchemaName
		,	source.TableName
		,	source.ChangeTrackingID
		,	source.LastUpdated
		,	source.PackageId
		)
WHEN NOT MATCHED BY SOURCE 
THEN DELETE;

SET IDENTITY_INSERT cfg.JNTChangeTracking OFF;

GO
declare @MergeAppId INT = 0;
declare @MergeProjectId INT = 0;
declare @MergePackageId INT = 0;
declare @MergeExecutionOrder INT = 0;
declare @MergeAppName VARCHAR(256) = 'SDT AgreementRebate';
declare @MergeProjectName VARCHAR(256) = 'SDT AgreementRebate';

exec [cfg].[AddSSISApplication] @MergeAppName, @MergeAppId OUTPUT;
exec [cfg].[AddSSISProject] @MergeProjectName, @MergeProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @MergeAppId, @MergeProjectId, 10;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreement.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;

exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreementWeeklySnapshot.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;

GO



GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [cfg].[ProjectPackages] WITH CHECK CHECK CONSTRAINT [FK_ProjectPackages_Packages];

ALTER TABLE [cfg].[ProjectPackages] WITH CHECK CHECK CONSTRAINT [FK_ProjectPackages_Projects];

ALTER TABLE [cfg].[ApplicationProjects] WITH CHECK CHECK CONSTRAINT [FK_ApplicationProjects_Applications];

ALTER TABLE [cfg].[ApplicationProjects] WITH CHECK CHECK CONSTRAINT [FK_ApplicationProjects_Projects];

ALTER TABLE [cfg].[JNTChangeTracking] WITH CHECK CHECK CONSTRAINT [FK_JNTChangeTracking_Package];

ALTER TABLE [log].[SSISAppInstance] WITH CHECK CHECK CONSTRAINT [FK_logSSISAppInstance_cfgApplication_ApplicationID];


GO
PRINT N'Update complete.';


GO

/*
Deployment script for sdt-config

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "sdt-config"
:setvar DefaultFilePrefix "sdt-config"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

declare @AppId INT = 0;
declare @AppId_Dim INT = 1;
declare @AppId_Fact INT = 2;
declare @AppId_Cube INT = 3;
declare @AppId_GDS INT = 4;
declare @AppId_Weblogs INT = 5;

declare @ProjectId INT = 0;
declare @ProjectId_Dim INT = 1;
declare @ProjectId_Fact INT = 2;
declare @ProjectId_Cube INT = 3;
declare @ProjectId_GDS INT = 4;
declare @ProjectId_Weblogs INT = 5;

declare @PackageId INT = 0;
declare @ExecutionOrder INT = 0;
declare @AppName VARCHAR(256) = 'SDT Load';
declare @AppName_Dim VARCHAR(256) = 'SDT Dim';
declare @AppName_Fact VARCHAR(256) = 'SDT Fact';
declare @AppName_Cube VARCHAR(256) = 'SDT Cube';
declare @AppName_GDS VARCHAR(256) = 'SDT GDS';
declare @AppName_Weblogs VARCHAR(256) = 'SDT Weblogs';

declare @ProjectName VARCHAR(256) = 'SDT Load';
declare @ProjectName_Dim VARCHAR(256) = 'SDT Dimensions';
declare @ProjectName_Fact VARCHAR(256) = 'SDT Facts';
declare @ProjectName_Cube VARCHAR(256) = 'SDT Cube';
declare @ProjectName_GDS VARCHAR(256) = 'SDT GDS';
declare @ProjectName_Weblogs VARCHAR(256) = 'SDT Weblogs';



exec [cfg].[AddSSISApplication] @AppName, @AppId OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Dim, @AppId_Dim OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Fact, @AppId_Fact OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Cube, @AppId_Cube OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_GDS, @AppId_GDS OUTPUT;
exec [cfg].[AddSSISApplication] @AppName_Weblogs, @AppId_Weblogs OUTPUT;


exec [cfg].[AddSSISProject] @ProjectName, @ProjectId OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Dim, @ProjectId_Dim OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Fact, @ProjectId_Fact OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Cube, @ProjectId_Cube OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_GDS, @ProjectId_GDS OUTPUT;
exec [cfg].[AddSSISProject] @ProjectName_Weblogs, @ProjectId_Weblogs OUTPUT;


exec [cfg].[AddSSISApplicationProject] @AppId, @ProjectId, 10;
exec [cfg].[AddSSISApplicationProject] @AppId_Dim, @ProjectId_Dim, 20;
exec [cfg].[AddSSISApplicationProject] @AppId_Fact, @ProjectId_Fact, 30;
exec [cfg].[AddSSISApplicationProject] @AppId_Cube, @ProjectId_Cube, 40;
exec [cfg].[AddSSISApplicationProject] @AppId_GDS, @ProjectId_GDS, 50;
exec [cfg].[AddSSISApplicationProject] @AppId_Weblogs, @ProjectId_Weblogs, 50;



-- Dimensions
exec @PackageId = [cfg].AddSSISPackage 'dimCoverage.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimField.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimWeekDate.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimTransactionType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimMarketingChannel.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimPaymentType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimApplicationEventType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

--FactDims (Treated as Dmmensions)
exec @PackageId = [cfg].AddSSISPackage 'dimWebVisitor.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimWebSession.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimApplication.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimGDS.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimShare.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimCustomer.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'dimAgreement.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Dim, @PackageId, @ExecutionOrder, 'I', 'F', 1;


-- Facts
exec @PackageId = [cfg].AddSSISPackage 'factApplicationEvent.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Fact, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'factTransaction.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Fact, @PackageId, @ExecutionOrder, 'I', 'F', 1;

--update pp 
--set Disabled = 1
----select *
--from cfg.Applications a
--join cfg.ApplicationProjects ap
--on a.ApplicationID = ap.ApplicationId
--join cfg.ProjectPackages pp
--on ap.ProjectId = pp.ProjectId
--join cfg.Projects pr
--on pp.ProjectId = pr.ProjectId
--join cfg.Packages pa
--on pp.PackageID = pa.PackageID
--where pa.PackageName = 'factTransaction.dtsx'

-- GDS
exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_application.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_admquery.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_applicant.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_decisionengine.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

exec @PackageId = [cfg].AddSSISPackage 'gds_sdtaylor_share.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_GDS, @PackageId, @ExecutionOrder, 'I', 'F', 1;

-- Weblogs
exec @PackageId = [cfg].AddSSISPackage 'weblogs_sdt_logimport.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Weblogs, @PackageId, @ExecutionOrder, 'I', 'F', 1;

-- Cube

exec @PackageId = [cfg].AddSSISPackage 'ProcessSDTApplicationCube.dtsx', '' ;
SET @ExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @ProjectId_Cube, @PackageId, @ExecutionOrder, 'I', 'F', 1;

GO
declare @AppId INT = 0;
declare @ProjectId INT = 0;
declare @PackageId INT = 0;
declare @ExecutionOrder INT = 0;
declare @AppName VARCHAR(256) = 'SDT Hubload';
declare @ProjectName VARCHAR(256) = 'SDT Hubload';

exec [cfg].[AddSSISApplication] @AppName, @AppId OUTPUT;

exec [cfg].[AddSSISProject] @ProjectName, @ProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @AppId, @ProjectId, 10;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementDefinitionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementDefinitionTable_acls.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementDefinitionTableExtra.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementPaymentMethodTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementStatusTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AgreementTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load AreaTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load BranchTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load BranchType.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CollectorTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CustomerDetailsTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CustomerPrevAddress.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load tblCustomerPaymentPerformance.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load CustomerTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load DivisionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_AL_BranchPayslips.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_CreditCardPaymentTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_CustomerAddressTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_PayrollCollectorLinkHistoryTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_PayrollTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load JourneyStatusTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load PostCodeRegions.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load Postcodes.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load PostCodeSectors.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RebateToPayPerPoundTable_acls.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RegionAreaTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RegionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load RPT_CashSheets.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load SectionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load TransactionTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load TransactionTypeTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load TransferHistoryTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load UserTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load WriteOffTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load MARS_RegistrationTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load MARS_WithdrawalReceiptTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load tblCustomerRisk.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

SET @ExecutionOrder += 10;
exec @PackageId = [cfg].AddSSISPackage 'Load IDM_PayrollCollectorLinkTable.dtsx', '' ;
exec [cfg].[AddSSISProjectPackage] @ProjectId, @PackageId, @ExecutionOrder, 'I', 'F', 1;

--[cfg].[GetSSISApplication] 'SDT Hubload', 1
GO
declare @MergeAppId INT = 0;
declare @MergeProjectId INT = 0;
declare @MergePackageId INT = 0;
declare @MergeExecutionOrder INT = 0;
declare @MergeAppName VARCHAR(256) = 'SDT HubMerge';
declare @MergeProjectName VARCHAR(256) = 'SDT HubMerge';

exec [cfg].[AddSSISApplication] @MergeAppName, @MergeAppId OUTPUT;
exec [cfg].[AddSSISProject] @MergeProjectName, @MergeProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @MergeAppId, @MergeProjectId, 10;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblBranch.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;

exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblUser.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblSection.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblProduct.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblCustomer.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblCustomerAddress.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


--exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreementStatus.dtsx', '' ;-- Folder name not needed for SSIS Catalog
--SET @MergeExecutionOrder += 10;
--exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreement.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourney.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourneySection.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourneyAgent.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblJourneyCustomer.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;

exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblVisit.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;  -- Visit will always work on a full load


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblVisitResult.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransaction.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransactionAllocation.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblRebateToPayPerPound.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


--exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransactionType.dtsx', '' ;-- Folder name not needed for SSIS Catalog
--SET @MergeExecutionOrder += 10;
--exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_mobile_tblCustomerRisk.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_mobile_tblDashboardAmount.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'I', 'F', 1;


/* Temp Disable non-Online Journey transformations - Transaction/TransactionAllocation */
--update pp 
--set Disabled = 1
----select *
--from cfg.Applications a
--join cfg.ApplicationProjects ap
--on a.ApplicationID = ap.ApplicationId
--join cfg.ProjectPackages pp
--on ap.ProjectId = pp.ProjectId
--join cfg.Projects pr
--on pp.ProjectId = pr.ProjectId
--join cfg.Packages pa
--on pp.PackageID = pa.PackageID
--where pa.PackageName in ('Merge_dbo_tblTransaction.dtsx','Merge_dbo_tblTransactionAllocation.dtsx')
declare @stgAppId INT = 0;
declare @stgProjectId INT = 0;
declare @stgPackageId INT = 0;
declare @stgExecutionOrder INT = 0;
declare @stgAppName VARCHAR(256) = 'SDT stgToJNT';
declare @stgProjectName VARCHAR(256) = 'SDT stgToJNT';

exec [cfg].[AddSSISApplication] @stgAppName, @stgAppId OUTPUT;
exec [cfg].[AddSSISProject] @stgProjectName, @stgProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @stgAppId, @stgProjectId, 10;

SET @stgExecutionOrder += 10;
exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_CustomerTable.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_CustomerAddress.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_mobile_MARS_WithdrawalReceipt.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_tblDashBoardAmount_Done.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_TransactionTable.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_JourneyAgent.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'F', 'F', 1;

exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_JourneySection.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @stgExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'F', 'F', 1;

-- *********************************************  Disabled at some point, unsure why (RB)
Declare @ProjectId INT, @PackageId INT

Select  @PackageId = pp.PackageId,
	   @ProjectId = p.ProjectId
	    
From   cfg.Projects p
Join   cfg.ProjectPackages pp on p.ProjectId = pp.ProjectId
Join   cfg.Packages pk on pk.PackageID = pp.PackageID
Where  p.ProjectName = 'SDT stgToJNT'
And           pk.PackageName = 'Merge_dbo_TransactionTable.dtsx'
 
Update cfg.ProjectPackages
set           Disabled = 1
Where  ProjectId = @ProjectId
and           PackageID = @PackageId

GO
declare @stgAppId INT = 0;
declare @stgProjectId INT = 0;
declare @stgPackageId INT = 0;
declare @stgExecutionOrder INT = 0;
declare @stgAppName VARCHAR(256) = 'SDT stgToJNT_Daily';
declare @stgProjectName VARCHAR(256) = 'SDT stgToJNT_Daily';

exec [cfg].[AddSSISApplication] @stgAppName, @stgAppId OUTPUT;
exec [cfg].[AddSSISProject] @stgProjectName, @stgProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @stgAppId, @stgProjectId, 10;

SET @stgExecutionOrder += 10;
exec @stgPackageId = [cfg].AddSSISPackage 'Update_CustomerTable_JourneyOrderBy.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

SET @stgExecutionOrder += 10;
exec @stgPackageId = [cfg].AddSSISPackage 'Merge_dbo_tblTransfersPending_DayMoves.dtsx', '' ;-- Folder name not needed for SSIS Catalog
exec [cfg].[AddSSISProjectPackage] @stgProjectId, @stgPackageId, @stgExecutionOrder, 'I', 'F', 1;

--[cfg].[GetSSISApplication] 'SDT stgToJNT_Daily', 1

GO
/* Create config records for package configuration */ 

DECLARE @SourceServer varchar(255);
DECLARE @HostServer varchar(255);
DECLARE @AzureAccountName varchar(255);
DECLARE @AzureAccountKey varchar(255);
DECLARE @Uid varchar(255);
DECLARE @pwd varchar(255);
DECLARE @MySQLUser varchar(100);
DECLARE @MySQLServer varchar(100);
DECLARE @EnvUser varchar(100);
DECLARE @EnvPassword varchar(100);


Select @HostServer = CASE 
WHEN @@SERVERNAME IN ('prod-sdt','sdt-preprod','uat-sdt','sdt-test','sdt-integration','testsdtdb')
THEN @@SERVERNAME+'.database.windows.net'
WHEN @@SERVERNAME = 'UAT-SDT-VM-DATA' THEN 'UAT-SDT-VM-DATA'
WHEN @@SERVERNAME = 'PREPROD-SDT-VM-DATA' THEN 'PREPROD-SDT-VM-DATA'
WHEN @@SERVERNAME = 'PROD-SDT-VM-DATA' THEN 'PROD-SDT-VM-DATA'
ELSE 'localhost'
END;

SELECT @SourceServer = CASE
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'testsdtdb.database.windows.net' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'uat-sdt.database.windows.net' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'sdt-test.database.windows.net' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'sdt-integration.database.windows.net' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'sdt-preprod.database.windows.net' -- These need setting
WHEN @HostServer = 'prd-sdt-integration.database.windows.net' THEN 'prd-sdt.database.windows.net' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'uat-sdt.database.windows.net' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'sdt-preprod.database.windows.net' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'prd-sdt.database.windows.net' -- These need setting
ELSE 'localhost'
END;

/* Azure Subscription Details */
SELECT @AzureAccountName = CASE
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'testsdtlogs' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'uatsdtlogs' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'testsdtlogs' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'sdtlogs' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'preprodsdtlogs' -- These need setting
WHEN @HostServer = 'prod-sdt-integration.database.windows.net' THEN 'prdsdtlogs' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'uatsdtlogs' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'preprodsdtlogs' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'prodsdtlogs' -- These need setting
ELSE 'uatsdtlogs'
END;

SELECT @AzureAccountKey = CASE
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'PJwWbVZnZQoNd9yBS8GyR5PeDslVO5PF67qzyhf0+54uL3E+weYCu1UjzmofcZ5JXsPRTIwGJxH9yeKmEqUDow==' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'prod-sdt.database.windows.net' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ==' -- These need setting
ELSE 'wZWCSZFd2013EfbmT7NEuuOoHBPLr6f2Ll3jeFOHTh4hpLgZ3rz+a+MHz9WIYGyL4BEvhhiArUIBAsFDHx72eQ=='
END
;



/* Need to clarify connection details */
SELECT @MySQLUser = CASE 
WHEN @HostServer IN ('PREPROD-SDT-VM-DATA','PROD-SDT-VM-DATA','UAT-SDT-VM-DATA','localhost','uat-sdt.database.windows.net','sdt-preprod.database.windows.net','prod-sdt.database.windows.net','testsdtdb.database.windows.net')
	THEN 'sdtaylor'
ELSE 'sdtaylor'
END;
 
SELECT @MySQLServer = CASE 
WHEN  @HostServer IN ('PREPROD-SDT-VM-DATA','PROD-SDT-VM-DATA','UAT-SDT-VM-DATA','localhost','uat-sdt.database.windows.net','sdt-preprod.database.windows.net','prod-sdt.database.windows.net','testsdtdb.database.windows.net')
	THEN 'ec2-52-50-237-245.eu-west-1.compute.amazonaws.com'
ELSE 'ec2-52-50-237-245.eu-west-1.compute.amazonaws.com'
END;

/* Set User Name & Password for Environments */

SELECT @EnvUser = CASE 
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'sdtadmin@testsdtdb' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'sdtadmin@uat-sdt' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'sdtadmin@sdt-test' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'sdtadmin@sdt-integration' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'OnlineUserLogin@sdt-preprod' -- These need setting
WHEN @HostServer = 'prod-sdt-integration.database.windows.net' THEN 'sdtadmin@prod-sdt' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'sdtadmin@uat-sdt' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'OnlineUserLogin@sdt-preprod' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'sdtadmin@uat-sdt' -- These need setting
ELSE 'sdtadmin@uat-sdt'
END;

SELECT @EnvPassword = CASE 
WHEN @HostServer = 'testsdtdb.database.windows.net' THEN 'Peroni4me' -- These need setting
WHEN @HostServer = 'uat-sdt.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'sdt-test.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'sdt-integration.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'sdt-preprod.database.windows.net' THEN 'Prapr2Vu3het' -- These need setting
WHEN @HostServer = 'prod-sdt-integration.database.windows.net' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'UAT-SDT-VM-DATA' THEN 'P445w0rd' -- These need setting
WHEN @HostServer = 'PREPROD-SDT-VM-DATA' THEN 'Prapr2Vu3het' -- These need setting
WHEN @HostServer = 'PROD-SDT-VM-DATA' THEN 'P445w0rd' -- These need setting
ELSE 'P445w0rd'
END;

-- Data Source=uat-sdt.database.windows.net;User ID=sdtadmin@uat-sdt;Password=P455w0rd;Initial Catalog=sdtStaging_tds;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;


;with config as (
SELECT *
FROM (
VALUES
(1,'CONFIG','ConfigDbConnectionstring','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdt-config;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdt-config].Properties[ConnectionString]','String'),
(2,'JNT','JNTDatabaseDbConnectionstring','Provider=SQLNCLI;Server=SDTDBV002;Database=JNTDatabase;Trusted_Connection=yes;','\Package.Connections[JNTDatabase].Properties[ConnectionString]','String'),
(3,'GDS','MySQLDbConnectionstring','server='+@MySQLServer+';user id='+@MySQLUser+';password=Datashed123;database=sdtaylor;','\Package.Connections[MySQLDb].Properties[ConnectionString]','String'),
(4,'MART','sdt-applicationdatamartDbConnectionstring','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdt-applicationdatamart;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdt-applicationdatamart].Properties[ConnectionString]','String'),
(5,'VAULT','sdt-datavaultDbConnectionstring','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdt-datavault;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdt-datavault].Properties[ConnectionString]','String'),
(6,'ADOVAULT','sdt-datavaultDbADONETConnectionstring','Server='+@SourceServer+';Database=sdt-datavault;User Id='+@EnvUser+';Password='+@EnvPassword+';','\Package.Connections[sdt-datavaultADONET].Properties[ConnectionString]','String'),
(7,'SDTLOGS','sdtlogsAzureConnectionString','DefaultEndpointsProtocol=https;AccountName='+@AzureAccountName+';AccountKey='+@AzureAccountKey+';','\Package.Connections[sdtlogs].Properties[ConnectionString]','String'),
(9,'HUB','sdtStagingDbConnectionString','Data Source='+@SourceServer+'User ID='+@EnvUser+';Password='+@EnvPassword+';Initial Catalog=sdtStaging_tds;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;','\Package.Connections[sdtStaging].Properties[ConnectionString]','String'),
(10,'CUBE','sdt-applicationcubeDbConnectionString','Data Source='+@SourceServer+';Initial Catalog=sdt-applicationcube;Provider=MSOLAP.7;Impersonation Level=Impersonate;','\Package.Connections[sdt-applicationcube].Properties[ConnectionString]','String')
) AS vtable
 
([PackageConfigId],[Common_Name],[ConfigurationFilter],[ConfiguredValue],[PackagePath],[ConfiguredValueType])
)
 
MERGE cfg.ETLCONFIG as Target
using config as Source
on Source.ConfigurationFilter = Target.ConfigurationFilter
WHEN MATCHED AND
	(ISNULL(Source.[Common_Name],'') <> ISNULL(Target.[Common_Name],'')
	OR ISNULL(Source.[ConfiguredValue],'') <> ISNULL(Target.[ConfiguredValue],'')
	OR ISNULL(Source.[PackagePath],'') <> ISNULL(Target.[PackagePath],'')
	OR ISNULL(Source.[ConfiguredValueType],'') <> ISNULL(Target.[ConfiguredValueType],'')
	OR ISNULL(Source.[Common_Name],'') <> ISNULL(Target.[Common_Name],'')
	)
THEN UPDATE SET
		[Common_Name] = Source.[Common_Name]
		,[ConfiguredValue] = Source.[ConfiguredValue]
		,[PackagePath] = Source.[PackagePath]
		,[ConfiguredValueType] = Source.[ConfiguredValueType]
WHEN NOT MATCHED THEN INSERT ([ConfigurationFilter],[ConfiguredValue],[PackagePath],[ConfiguredValueType])
Values (Source.[ConfigurationFilter],Source.[ConfiguredValue],Source.[PackagePath],Source.[ConfiguredValueType])
WHEN NOT MATCHED BY SOURCE 
THEN DELETE;

--update [cfg].[ETLConfig]
--	set [ConfiguredValue] = CASE WHEN @@ServerName = 'UAT-SDT-VM-DATA' THEN REPLACE([ConfiguredValue],'uat-sdt.database.windows.net','UAT-SDT-VM-DATA')
--									ELSE [ConfiguredValue] END
--	where PackageConfigId in (1,9);
WITH sourcetables
AS (
--StagingDb related tables (being added to StagingDb and will provide the link to JNT data)
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplication' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplicationCustomer' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplicationEvents' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblApplicationExclusions' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblEventType' as TableName UNION
SELECT 'sdtStaging' as databasename,'online' as schemaname,'tblExclusionType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblAgreement' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblAgreementStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblArea' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblBadDebtStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblBranch' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCompany' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomer' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomerAddress' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomerAddressType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblCustomerStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblDefaultedStatus' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblFinanciallySanctionedList' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourney' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneyAgent' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneyAgentDelegated' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneyCustomer' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblJourneySection' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPaymentFrequency' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPaymentType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPostcodeCoverage' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblProduct' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblRegion' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblSection' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblTransaction' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblTransactionType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblUser' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblWeekEnding' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblAAIndicator' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblPPMessage' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblTransactionAllocation' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblChannelType' as TableName UNION
SELECT 'sdtStaging' as databasename,'dbo' as schemaname,'tblRebateToPayPerPound' as TableName 
-- GDS related tables (will be source for Bureau variable details & summary)
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'ADMQuery' as TableName UNION
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'Application' as TableName UNION
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'DecisionEngine' as TableName UNION
--SELECT 'sdtaylor' as databasename,'sdtaylor' as schemaname,'Share' as TableName



	)
MERGE dbo.SourceTables AS target
USING sourcetables AS Source
	ON Target.Databasename = source.databasename
		AND target.schemaname = source.schemaname
		AND target.tablename = source.tablename
WHEN NOT MATCHED
	THEN
		INSERT (
			tablename
			,databasename
			,schemaname
			)
		VALUES (
			source.tablename
			,source.databasename
			,source.schemaname
			)
WHEN NOT MATCHED BY SOURCE
	THEN DELETE;
-- Insert JNT Change Tracking tables

SET IDENTITY_INSERT cfg.JNTChangeTracking ON;

;WITH CTE AS	(
				SELECT *
				FROM	(
							SELECT 1, 'dbo', 'tblCustomer', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_CustomerTable.dtsx'
						UNION
							SELECT 2, 'dbo', 'tblCustomerAddress', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_CustomerAddress.dtsx'
						UNION
							SELECT 3, 'mobile', 'tblDashboardAmount (Mars)', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_mobile_MARS_WithdrawalReceipt.dtsx'
						UNION
							SELECT 4, 'mobile', 'tblDashboardAmount (Done)', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_tblDashBoardAmount_Done.dtsx'
						UNION
							SELECT 5, 'dbo', 'tblTransaction', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_TransactionTable.dtsx'
						UNION
							SELECT 6, 'dbo', 'tblJourneyCustomer_JourneyOrderBy', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Update_CustomerTable_JourneyOrderBy.dtsx'
						UNION
							SELECT 7, 'dbo', 'tblJourneyCustomer', 0, GETDATE(), PackageId FROM cfg.Packages WHERE PackageName = 'Merge_dbo_tblTransfersPending_DayMoves.dtsx'
						) AS ctTable
					(JNTChangeTrackingID, SchemaName, TableName, ChangeTrackingID, LastUpdated, PackageId)
				)
MERGE	cfg.JNTChangeTracking	dest
USING	CTE						source ON dest.JNTChangeTrackingID = source.JNTChangeTrackingID
WHEN MATCHED
THEN 
UPDATE	
SET		SchemaName			= source.SchemaName
,		TableName			= source.TableName
,		ChangeTrackingID	= source.ChangeTrackingID
,		LastUpdated			= source.LastUpdated
,		PackageId			= source.PackageId
WHEN NOT MATCHED
THEN
INSERT
		(	JNTChangeTrackingID
		,	SchemaName
		,	TableName
		,	ChangeTrackingID
		,	LastUpdated
		,	PackageId
		)
VALUES	(	source.JNTChangeTrackingID
		,	source.SchemaName
		,	source.TableName
		,	source.ChangeTrackingID
		,	source.LastUpdated
		,	source.PackageId
		)
WHEN NOT MATCHED BY SOURCE 
THEN DELETE;

SET IDENTITY_INSERT cfg.JNTChangeTracking OFF;

GO
declare @MergeAppId INT = 0;
declare @MergeProjectId INT = 0;
declare @MergePackageId INT = 0;
declare @MergeExecutionOrder INT = 0;
declare @MergeAppName VARCHAR(256) = 'SDT AgreementRebate';
declare @MergeProjectName VARCHAR(256) = 'SDT AgreementRebate';

exec [cfg].[AddSSISApplication] @MergeAppName, @MergeAppId OUTPUT;
exec [cfg].[AddSSISProject] @MergeProjectName, @MergeProjectId OUTPUT;
exec [cfg].[AddSSISApplicationProject] @MergeAppId, @MergeProjectId, 10;


exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreement.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;

exec @MergePackageId = [cfg].AddSSISPackage 'Merge_dbo_tblAgreementWeeklySnapshot.dtsx', '' ;-- Folder name not needed for SSIS Catalog
SET @MergeExecutionOrder += 10;
exec [cfg].[AddSSISProjectPackage] @MergeProjectId, @MergePackageId, @MergeExecutionOrder, 'F', 'F', 1;

GO



GO

GO
PRINT N'Update complete.';


GO
